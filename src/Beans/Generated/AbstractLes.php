<?php
declare(strict_types=1);

namespace rikmeijer\Teach\Beans\Generated;

use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\AlterableResultIterator;
use Ramsey\Uuid\Uuid;
use rikmeijer\Teach\Beans\Lesweek;
use rikmeijer\Teach\Beans\Module;
use rikmeijer\Teach\Beans\Contactmoment;
use TheCodingMachine\TDBM\AbstractTDBMObject;

/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the Les class instead!
 */

/**
 * The AbstractLes class maps the 'les' table in database.
 */
abstract class AbstractLes extends AbstractTDBMObject implements \JsonSerializable
{
    /**
     * The constructor takes all compulsory arguments.
     *
     * @param Lesweek $lesweek
     * @param Module $moduleNaam
     * @param string $naam
     */
    public function __construct(Lesweek $lesweek, Module $moduleNaam, string $naam)
    {
        parent::__construct();
        $this->setLesweek($lesweek);
        $this->setModuleNaam($moduleNaam);
        $this->setNaam($naam);
    }

    /**
     * The getter for the "id" column.
     *
     * @return int|null
     */
    public function getId() : ?int
    {
        return $this->get('id', 'les');
    }

    /**
     * The setter for the "id" column.
     *
     * @param int $id
     */
    public function setId(int $id) : void
    {
        $this->set('id', $id, 'les');
    }

    /**
     * Returns the Lesweek object bound to this object via the jaar and kalenderweek column.
     *
     * @return Lesweek
     */
    public function getLesweek(): Lesweek
    {
        return $this->getRef('fk_leslesweek', 'les');
    }

    /**
     * The setter for the Lesweek object bound to this object via the jaar and kalenderweek column.
     *
     * @param Lesweek $object
     */
    public function setLesweek(Lesweek $object) : void
    {
        $this->setRef('fk_leslesweek', $object, 'les');
    }

    /**
     * Returns the Module object bound to this object via the module_naam column.
     *
     * @return Module
     */
    public function getModuleNaam(): Module
    {
        return $this->getRef('fk_lesmodule', 'les');
    }

    /**
     * The setter for the Module object bound to this object via the module_naam column.
     *
     * @param Module $object
     */
    public function setModuleNaam(Module $object) : void
    {
        $this->setRef('fk_lesmodule', $object, 'les');
    }

    /**
     * The getter for the "naam" column.
     *
     * @return string
     */
    public function getNaam() : string
    {
        return $this->get('naam', 'les');
    }

    /**
     * The setter for the "naam" column.
     *
     * @param string $naam
     */
    public function setNaam(string $naam) : void
    {
        $this->set('naam', $naam, 'les');
    }

    /**
     * The getter for the "opmerkingen" column.
     *
     * @return string|null
     */
    public function getOpmerkingen() : ?string
    {
        return $this->get('opmerkingen', 'les');
    }

    /**
     * The setter for the "opmerkingen" column.
     *
     * @param string|null $opmerkingen
     */
    public function setOpmerkingen(?string $opmerkingen) : void
    {
        $this->set('opmerkingen', $opmerkingen, 'les');
    }

    /**
     * The getter for the "created_at" column.
     *
     * @return \DateTimeImmutable|null
     */
    public function getCreatedAt() : ?\DateTimeImmutable
    {
        return $this->get('created_at', 'les');
    }

    /**
     * The setter for the "created_at" column.
     *
     * @param \DateTimeImmutable|null $created_at
     */
    public function setCreatedAt(?\DateTimeImmutable $created_at) : void
    {
        $this->set('created_at', $created_at, 'les');
    }

    /**
     * The getter for the "updated_at" column.
     *
     * @return \DateTimeImmutable|null
     */
    public function getUpdatedAt() : ?\DateTimeImmutable
    {
        return $this->get('updated_at', 'les');
    }

    /**
     * The setter for the "updated_at" column.
     *
     * @param \DateTimeImmutable|null $updated_at
     */
    public function setUpdatedAt(?\DateTimeImmutable $updated_at) : void
    {
        $this->set('updated_at', $updated_at, 'les');
    }

    /**
     * Returns the list of Contactmoment pointing to this bean via the les_id column.
     *
     * @return Contactmoment[]|AlterableResultIterator
     */
    public function getContactmoment() : AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('contactmoment', 'fk_contactmoment_les', 'contactmoment', ['contactmoment.les_id' => $this->get('id', 'les')]);
    }


    /**
     * Serializes the object for JSON encoding.
     *
     * @param bool $stopRecursion Parameter used internally by TDBM to stop embedded objects from embedding other objects.
     * @return array
     */
    public function jsonSerialize($stopRecursion = false)
    {
        $array = [];
        $array['id'] = $this->getId();
        if (!$stopRecursion) {
            $object = $this->getLesweek();
            $array['lesweek'] = $object ? $object->jsonSerialize(true) : null;
        }
        if (!$stopRecursion) {
            $object = $this->getModuleNaam();
            $array['moduleNaam'] = $object ? $object->jsonSerialize(true) : null;
        }
        $array['naam'] = $this->getNaam();
        $array['opmerkingen'] = $this->getOpmerkingen();
        $array['createdAt'] = ($this->getCreatedAt() === null) ? null : $this->getCreatedAt()->format('c');
        $array['updatedAt'] = ($this->getUpdatedAt() === null) ? null : $this->getUpdatedAt()->format('c');


        return $array;
    }

    /**
     * Returns an array of used tables by this bean (from parent to child relationship).
     *
     * @return string[]
     */
    protected function getUsedTables() : array
    {
        return [ 'les' ];
    }

    /**
     * Method called when the bean is removed from database.
     *
     */
    protected function onDelete() : void
    {
        parent::onDelete();
        $this->setRef('fk_leslesweek', null, 'les');
        $this->setRef('fk_lesmodule', null, 'les');
    }
}
