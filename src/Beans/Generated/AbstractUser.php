<?php
declare(strict_types=1);

namespace rikmeijer\Teach\Beans\Generated;

use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\AlterableResultIterator;
use Ramsey\Uuid\Uuid;
use rikmeijer\Teach\Beans\Useremailaddress;
use rikmeijer\Teach\Beans\Contactmoment;
use TheCodingMachine\TDBM\AbstractTDBMObject;

/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the User class instead!
 */

/**
 * The AbstractUser class maps the 'users' table in database.
 */
abstract class AbstractUser extends AbstractTDBMObject implements \JsonSerializable
{
    /**
     * The constructor takes all compulsory arguments.
     *
     * @param string $id
     * @param Useremailaddress $email
     * @param string $name
     */
    public function __construct(string $id, Useremailaddress $email, string $name)
    {
        parent::__construct();
        $this->setId($id);
        $this->setEmail($email);
        $this->setName($name);
    }

    /**
     * The getter for the "id" column.
     *
     * @return string
     */
    public function getId() : string
    {
        return $this->get('id', 'users');
    }

    /**
     * The setter for the "id" column.
     *
     * @param string $id
     */
    public function setId(string $id) : void
    {
        $this->set('id', $id, 'users');
    }

    /**
     * Returns the Useremailaddress object bound to this object via the email column.
     *
     * @return Useremailaddress
     */
    public function getEmail(): Useremailaddress
    {
        return $this->getRef('primary_email', 'users');
    }

    /**
     * The setter for the Useremailaddress object bound to this object via the email column.
     *
     * @param Useremailaddress $object
     */
    public function setEmail(Useremailaddress $object) : void
    {
        $this->setRef('primary_email', $object, 'users');
    }

    /**
     * The getter for the "name" column.
     *
     * @return string
     */
    public function getName() : string
    {
        return $this->get('name', 'users');
    }

    /**
     * The setter for the "name" column.
     *
     * @param string $name
     */
    public function setName(string $name) : void
    {
        $this->set('name', $name, 'users');
    }

    /**
     * The getter for the "remember_token" column.
     *
     * @return string|null
     */
    public function getRememberToken() : ?string
    {
        return $this->get('remember_token', 'users');
    }

    /**
     * The setter for the "remember_token" column.
     *
     * @param string|null $remember_token
     */
    public function setRememberToken(?string $remember_token) : void
    {
        $this->set('remember_token', $remember_token, 'users');
    }

    /**
     * The getter for the "created_at" column.
     *
     * @return \DateTimeImmutable|null
     */
    public function getCreatedAt() : ?\DateTimeImmutable
    {
        return $this->get('created_at', 'users');
    }

    /**
     * The setter for the "created_at" column.
     *
     * @param \DateTimeImmutable|null $created_at
     */
    public function setCreatedAt(?\DateTimeImmutable $created_at) : void
    {
        $this->set('created_at', $created_at, 'users');
    }

    /**
     * The getter for the "updated_at" column.
     *
     * @return \DateTimeImmutable|null
     */
    public function getUpdatedAt() : ?\DateTimeImmutable
    {
        return $this->get('updated_at', 'users');
    }

    /**
     * The setter for the "updated_at" column.
     *
     * @param \DateTimeImmutable|null $updated_at
     */
    public function setUpdatedAt(?\DateTimeImmutable $updated_at) : void
    {
        $this->set('updated_at', $updated_at, 'users');
    }

    /**
     * Returns the list of Contactmoment pointing to this bean via the owner column.
     *
     * @return Contactmoment[]|AlterableResultIterator
     */
    public function getContactmoment() : AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('contactmoment', 'FK_929E7431CF60E67C', 'contactmoment', ['contactmoment.owner' => $this->get('id', 'users')]);
    }

    /**
     * Returns the list of Useremailaddress pointing to this bean via the userid column.
     *
     * @return Useremailaddress[]|AlterableResultIterator
     */
    public function getUseremailaddresses() : AlterableResultIterator
    {
        return $this->retrieveManyToOneRelationshipsStorage('useremailaddresses', 'FK_BB2C241F132696E', 'useremailaddresses', ['useremailaddresses.userid' => $this->get('id', 'users')]);
    }


    /**
     * Serializes the object for JSON encoding.
     *
     * @param bool $stopRecursion Parameter used internally by TDBM to stop embedded objects from embedding other objects.
     * @return array
     */
    public function jsonSerialize($stopRecursion = false)
    {
        $array = [];
        $array['id'] = $this->getId();
        if (!$stopRecursion) {
            $object = $this->getEmail();
            $array['email'] = $object ? $object->jsonSerialize(true) : null;
        }
        $array['name'] = $this->getName();
        $array['rememberToken'] = $this->getRememberToken();
        $array['createdAt'] = ($this->getCreatedAt() === null) ? null : $this->getCreatedAt()->format('c');
        $array['updatedAt'] = ($this->getUpdatedAt() === null) ? null : $this->getUpdatedAt()->format('c');


        return $array;
    }

    /**
     * Returns an array of used tables by this bean (from parent to child relationship).
     *
     * @return string[]
     */
    protected function getUsedTables() : array
    {
        return [ 'users' ];
    }

    /**
     * Method called when the bean is removed from database.
     *
     */
    protected function onDelete() : void
    {
        parent::onDelete();
        $this->setRef('primary_email', null, 'users');
    }
}
