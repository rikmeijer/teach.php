<?php
/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the LesweekDao class instead!
 */

declare(strict_types=1);

namespace rikmeijer\Teach\Daos\Generated;

use TheCodingMachine\TDBM\TDBMService;
use TheCodingMachine\TDBM\ResultIterator;
use rikmeijer\Teach\Beans\Lesweek;

/**
 * The AbstractLesweekDao class will maintain the persistence of Lesweek class into the lesweek table.
 *
 */
class AbstractLesweekDao
{

    /**
     * @var TDBMService
     */
    protected $tdbmService;

    /**
     * The default sort column.
     *
     * @var string
     */
    private $defaultSort = null;

    /**
     * The default sort direction.
     *
     * @var string
     */
    private $defaultDirection = 'asc';

    /**
     * Sets the TDBM service used by this DAO.
     *
     * @param TDBMService $tdbmService
     */
    public function __construct(TDBMService $tdbmService)
    {
        $this->tdbmService = $tdbmService;
    }

    /**
     * Persist the Lesweek instance.
     *
     * @param Lesweek $obj The bean to save.
     */
    public function save(Lesweek $obj): void
    {
        $this->tdbmService->save($obj);
    }

    /**
     * Get all Lesweek records.
     *
     * @return Lesweek[]|ResultIterator
     */
    public function findAll() : ResultIterator
    {
        if ($this->defaultSort) {
            $orderBy = 'lesweek.'.$this->defaultSort.' '.$this->defaultDirection;
        } else {
            $orderBy = null;
        }
        return $this->tdbmService->findObjects('lesweek', null, [], $orderBy);
    }
    
    /**
     * Deletes the Lesweek passed in parameter.
     *
     * @param Lesweek $obj object to delete
     * @param bool $cascade if true, it will delete all object linked to $obj
     */
    public function delete(Lesweek $obj, bool $cascade = false) : void
    {
        if ($cascade === true) {
            $this->tdbmService->deleteCascade($obj);
        } else {
            $this->tdbmService->delete($obj);
        }
    }


    /**
     * Get a list of Lesweek specified by its filters.
     *
     * @param mixed $filter The filter bag (see TDBMService::findObjects for complete description)
     * @param mixed[] $parameters The parameters associated with the filter
     * @param mixed $orderBy The order string
     * @param string[] $additionalTablesFetch A list of additional tables to fetch (for performance improvement)
     * @param int|null $mode Either TDBMService::MODE_ARRAY or TDBMService::MODE_CURSOR (for large datasets). Defaults to TDBMService::MODE_ARRAY.
     * @return Lesweek[]|ResultIterator
     */
    protected function find($filter = null, array $parameters = [], $orderBy=null, array $additionalTablesFetch = [], ?int $mode = null) : ResultIterator
    {
        if ($this->defaultSort && $orderBy == null) {
            $orderBy = 'lesweek.'.$this->defaultSort.' '.$this->defaultDirection;
        }
        return $this->tdbmService->findObjects('lesweek', $filter, $parameters, $orderBy, $additionalTablesFetch, $mode);
    }

    /**
     * Get a list of Lesweek specified by its filters.
     * Unlike the `find` method that guesses the FROM part of the statement, here you can pass the $from part.
     *
     * You should not put an alias on the main table name. So your $from variable should look like:
     *
     *   "lesweek JOIN ... ON ..."
     *
     * @param string $from The sql from statement
     * @param mixed $filter The filter bag (see TDBMService::findObjects for complete description)
     * @param mixed[] $parameters The parameters associated with the filter
     * @param mixed $orderBy The order string
     * @param int|null $mode Either TDBMService::MODE_ARRAY or TDBMService::MODE_CURSOR (for large datasets). Defaults to TDBMService::MODE_ARRAY.
     * @return Lesweek[]|ResultIterator
     */
    protected function findFromSql(string $from, $filter = null, array $parameters = [], $orderBy = null, ?int $mode = null) : ResultIterator
    {
        if ($this->defaultSort && $orderBy == null) {
            $orderBy = 'lesweek.'.$this->defaultSort.' '.$this->defaultDirection;
        }
        return $this->tdbmService->findObjectsFromSql('lesweek', $from, $filter, $parameters, $orderBy, $mode);
    }

    /**
     * Get a list of Lesweek from a SQL query.
     * Unlike the `find` and `findFromSql` methods, here you can pass the whole $sql query.
     *
     * You should not put an alias on the main table name, and select its columns using `*`. So the SELECT part of you $sql should look like:
     *
     *   "SELECT lesweek.* FROM ..."
     *
     * @param string $sql The sql query
     * @param mixed[] $parameters The parameters associated with the filter
     * @param string|null $countSql The count sql query (automatically computed if not provided)
     * @param int|null $mode Either TDBMService::MODE_ARRAY or TDBMService::MODE_CURSOR (for large datasets). Defaults to TDBMService::MODE_ARRAY.
     * @return Lesweek[]|ResultIterator
     */
    protected function findFromRawSql(string $sql, array $parameters = [], ?string $countSql = null, ?int $mode = null) : ResultIterator
    {
        return $this->tdbmService->findObjectsFromRawSql('lesweek', $sql, $parameters, $mode, null, $countSql);
    }

    /**
     * Get a single Lesweek specified by its filters.
     *
     * @param mixed $filter The filter bag (see TDBMService::findObjects for complete description)
     * @param mixed[] $parameters The parameters associated with the filter
     * @param string[] $additionalTablesFetch A list of additional tables to fetch (for performance improvement)
     * @return Lesweek|null
     */
    protected function findOne($filter = null, array $parameters = [], array $additionalTablesFetch = []) : ?Lesweek
    {
        return $this->tdbmService->findObject('lesweek', $filter, $parameters, $additionalTablesFetch);
    }

    /**
     * Get a single Lesweek specified by its filters.
     * Unlike the `find` method that guesses the FROM part of the statement, here you can pass the $from part.
     *
     * You should not put an alias on the main table name. So your $from variable should look like:
     *
     *   "lesweek JOIN ... ON ..."
     *
     * @param string $from The sql from statement
     * @param mixed $filter The filter bag (see TDBMService::findObjects for complete description)
     * @param mixed[] $parameters The parameters associated with the filter
     * @return Lesweek|null
     */
    protected function findOneFromSql(string $from, $filter = null, array $parameters = []) : ?Lesweek
    {
        return $this->tdbmService->findObjectFromSql('lesweek', $from, $filter, $parameters);
    }

    /**
     * Sets the default column for default sorting.
     *
     * @param string $defaultSort
     */
    public function setDefaultSort(string $defaultSort) : void
    {
        $this->defaultSort = $defaultSort;
    }
}
